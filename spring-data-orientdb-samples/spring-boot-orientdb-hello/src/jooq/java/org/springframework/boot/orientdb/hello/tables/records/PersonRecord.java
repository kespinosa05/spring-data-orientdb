/*
 * This file is generated by jOOQ.
 */
package org.springframework.boot.orientdb.hello.tables.records;


import javax.annotation.Generated;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Index;
import javax.persistence.Table;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record5;
import org.jooq.Row5;
import org.jooq.impl.UpdatableRecordImpl;
import org.springframework.boot.orientdb.hello.tables.Person;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Entity
@Table(name = "PERSON", schema = "PUBLIC", indexes = {
    @Index(name = "PRIMARY_KEY_8", unique = true, columnList = "ID ASC")
})
public class PersonRecord extends UpdatableRecordImpl<PersonRecord> implements Record5<String, Integer, String, String, Long> {

    private static final long serialVersionUID = -1867649788;

    /**
     * Setter for <code>PUBLIC.PERSON.ID</code>.
     */
    public void setId(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>PUBLIC.PERSON.ID</code>.
     */
    @Id
    @Column(name = "ID", unique = true, nullable = false, length = 255)
    public String getId() {
        return (String) get(0);
    }

    /**
     * Setter for <code>PUBLIC.PERSON.AGE</code>.
     */
    public void setAge(Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>PUBLIC.PERSON.AGE</code>.
     */
    @Column(name = "AGE", precision = 10)
    public Integer getAge() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>PUBLIC.PERSON.FIRST_NAME</code>.
     */
    public void setFirstName(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>PUBLIC.PERSON.FIRST_NAME</code>.
     */
    @Column(name = "FIRST_NAME", length = 255)
    public String getFirstName() {
        return (String) get(2);
    }

    /**
     * Setter for <code>PUBLIC.PERSON.LAST_NAME</code>.
     */
    public void setLastName(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>PUBLIC.PERSON.LAST_NAME</code>.
     */
    @Column(name = "LAST_NAME", length = 255)
    public String getLastName() {
        return (String) get(3);
    }

    /**
     * Setter for <code>PUBLIC.PERSON.VERSION</code>.
     */
    public void setVersion(Long value) {
        set(4, value);
    }

    /**
     * Getter for <code>PUBLIC.PERSON.VERSION</code>.
     */
    @Column(name = "VERSION", precision = 19)
    public Long getVersion() {
        return (Long) get(4);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record5 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row5<String, Integer, String, String, Long> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row5<String, Integer, String, String, Long> valuesRow() {
        return (Row5) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field1() {
        return Person.PERSON.ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field2() {
        return Person.PERSON.AGE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field3() {
        return Person.PERSON.FIRST_NAME;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field4() {
        return Person.PERSON.LAST_NAME;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Long> field5() {
        return Person.PERSON.VERSION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component1() {
        return getId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer component2() {
        return getAge();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component3() {
        return getFirstName();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component4() {
        return getLastName();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Long component5() {
        return getVersion();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value1() {
        return getId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value2() {
        return getAge();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value3() {
        return getFirstName();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value4() {
        return getLastName();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Long value5() {
        return getVersion();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PersonRecord value1(String value) {
        setId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PersonRecord value2(Integer value) {
        setAge(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PersonRecord value3(String value) {
        setFirstName(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PersonRecord value4(String value) {
        setLastName(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PersonRecord value5(Long value) {
        setVersion(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PersonRecord values(String value1, Integer value2, String value3, String value4, Long value5) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached PersonRecord
     */
    public PersonRecord() {
        super(Person.PERSON);
    }

    /**
     * Create a detached, initialised PersonRecord
     */
    public PersonRecord(String id, Integer age, String firstName, String lastName, Long version) {
        super(Person.PERSON);

        set(0, id);
        set(1, age);
        set(2, firstName);
        set(3, lastName);
        set(4, version);
    }
}
